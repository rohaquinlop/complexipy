{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"complexipy","text":"<p>Blazingly fast cognitive complexity analysis for Python, written in Rust.</p> <p> </p>"},{"location":"#what-is-cognitive-complexity","title":"What is Cognitive Complexity?","text":"<p>Cognitive complexity measures how hard code is to understand by humans, not machines.</p> <p>Unlike traditional complexity metrics that focus on mathematical models, cognitive complexity aligns with human intuition about code difficulty. It helps identify code that truly needs refactoring and improves code review effectiveness.</p> <p>Why use complexipy?</p> <ul> <li>Human-focused \u2014 Matches developer perception of difficulty</li> <li>Actionable \u2014 Identifies specific code that needs attention  </li> <li>Practical \u2014 Improves maintainability and code reviews</li> <li>\u26a1 Fast \u2014 Rust-powered analysis for large codebases</li> </ul> <p>Background Research</p> <p>Read the original research: Cognitive Complexity: A new way of measuring understandability</p>"},{"location":"#installation","title":"Installation","text":"<p>Install complexipy using your preferred Python package manager:</p> uvpip <pre><code>uv add complexipy\n</code></pre> <pre><code>pip install complexipy\n</code></pre> <p>Requirements:</p> <ul> <li>Python 3.8+</li> <li>Git (optional, for repository analysis)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with complexipy in seconds:</p>"},{"location":"#command-line","title":"Command Line","text":"<pre><code># Analyze current directory\ncomplexipy .\n\n# Analyze specific files or directories\ncomplexipy src/main.py tests/\n\n# Set complexity threshold\ncomplexipy . --max-complexity-allowed 10\n\n# Generate reports\ncomplexipy . --output-json --output-csv\n\n# Analyze current directory while excluding specific files\ncomplexipy . --exclude file_to_exclude.py --exclude path/to/other/exclude.py\n</code></pre>"},{"location":"#python-api","title":"Python API","text":"<pre><code>from complexipy import file_complexity, code_complexity\n\n# Analyze a file\nresult = file_complexity(\"app.py\")\nprint(f\"Total complexity: {result.complexity}\")\n\n# Find complex functions\nfor func in result.functions:\n    if func.complexity &gt; 15:\n        print(f\"{func.name}: {func.complexity}\")\n\n# Analyze code directly\ncode = \"\"\"\ndef complex_function(data):\n    for item in data:\n        if item.is_valid():\n            if item.priority == 'high':\n                process_urgent(item)\n            else:\n                process_normal(item)\n\"\"\"\n\nresult = code_complexity(code)\nprint(f\"Code complexity: {result.complexity}\")\n</code></pre>"},{"location":"#cli-reference","title":"CLI Reference","text":""},{"location":"#commands","title":"Commands","text":"<pre><code># Basic usage\ncomplexipy &lt;path&gt;                       # Analyze path (file/directory/URL)\ncomplexipy .                            # Current directory\ncomplexipy src/                         # Specific directory  \ncomplexipy app.py                       # Single file\ncomplexipy https://github.com/user/repo # Remote repository\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>complexipy supports configuration via TOML files for consistent settings across your project. Configuration files are loaded in this order of precedence:</p> <ol> <li><code>complexipy.toml</code> (project-specific config)</li> <li><code>.complexipy.toml</code> (hidden config file)  </li> <li><code>pyproject.toml</code> (under <code>[tool.complexipy]</code> section)</li> </ol>"},{"location":"#configuration-options","title":"Configuration Options","text":"<p>All CLI options can be configured via TOML files:</p> <pre><code># complexipy.toml or .complexipy.toml\npaths = [\"src\", \"tests\"]\nmax-complexity-allowed = 10\nquiet = false\nignore-complexity = false\ndetails = \"normal\"\ncolor = \"auto\"\nsort = \"asc\"\nexclude = []\n\n[output]\ncsv = true\njson = true\n</code></pre> <p>For <code>pyproject.toml</code>, use the <code>[tool.complexipy]</code> section:</p> <pre><code># pyproject.toml\n[tool.complexipy]\npaths = [\"src\", \"tests\"]\nmax-complexity-allowed = 10\nquiet = false\nignore-complexity = false\ndetails = \"normal\"\ncolor = \"auto\"\nsort = \"asc\"\nexclude = []\n\n[tool.complexipy.output]\ncsv = true\njson = true\n</code></pre> <p>Configuration Precedence</p> <p>CLI arguments always override TOML configuration values, allowing for flexible per-run customization.</p>"},{"location":"#options","title":"Options","text":"Option Description Default <code>--exclude</code> Exclude entries relative to each provided path. Entries resolve to existing directories (prefix match) or files (exact match). Non-existent entries are ignored. <code>--max-complexity-allowed &lt;N&gt;</code> Complexity threshold for warnings <code>15</code> <code>--output-json</code> Export results to JSON <code>false</code> <code>--output-csv</code> Export results to CSV <code>false</code> <code>--details &lt;normal\\|low&gt;</code> Output verbosity level <code>normal</code> <code>--color &lt;auto\\|yes\\|no&gt;</code> Use color <code>auto</code> <code>--sort &lt;asc\\|desc\\|name&gt;</code> Sort results by complexity or name <code>asc</code> <code>--quiet</code> Suppress terminal output <code>false</code> <code>--ignore-complexity</code> Don't exit with error on threshold breach <code>false</code> <code>--version</code> Show installed complexipy version and exit -"},{"location":"#examples","title":"Examples","text":"<pre><code># Find only high-complexity functions\ncomplexipy . --details low --sort desc\n\n# Generate reports with custom threshold\ncomplexipy . --max-complexity-allowed 8 --output-json\n\n# Silent analysis sorted by name\ncomplexipy src/ --sort name --quiet\n\n# Exclude specific paths relative to root, and disable color\ncomplexipy . --exclude tests --exclude utils --color no\n# Note: this excludes only './tests/**' and './utils/**' under '.',\n# it does not exclude './complexipy/utils.py'.\n</code></pre> <p>Exit Codes</p> <p>complexipy returns exit code <code>1</code> when functions exceed the complexity threshold. Use <code>--ignore-complexity</code> to suppress this behavior in CI/CD pipelines.</p>"},{"location":"#inline-ignores","title":"Inline Ignores","text":"<p>You can explicitly ignore a known complex function inline, similar to Ruff's <code>C901</code> ignores:</p> <pre><code>def legacy_adapter(x, y):  # noqa: complexipy (safe wrapper)\n    if x and y:\n        return x + y\n    return 0\n</code></pre> <p>Place <code># noqa: complexipy</code> on the function definition line (or the line immediately above). An optional reason can be provided in parentheses or plain text, it\u2019s ignored by the parser.</p>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#functions","title":"Functions","text":""},{"location":"#file_complexitypath-str-filecomplexity","title":"<code>file_complexity(path: str) -&gt; FileComplexity</code>","text":"<p>Analyze the cognitive complexity of a Python file.</p> <p>Parameters: - <code>path</code> (str): Path to the Python file to analyze</p> <p>Returns: <code>FileComplexity</code> object containing analysis results</p>"},{"location":"#code_complexitysource-str-codecomplexity","title":"<code>code_complexity(source: str) -&gt; CodeComplexity</code>","text":"<p>Analyze the cognitive complexity of Python source code.</p> <p>Parameters: - <code>source</code> (str): Python source code as a string</p> <p>Returns: <code>CodeComplexity</code> object containing analysis results</p>"},{"location":"#data-types","title":"Data Types","text":""},{"location":"#filecomplexity","title":"<code>FileComplexity</code>","text":"<pre><code>@dataclass\nclass FileComplexity:\n    path: str                           # File path\n    file_name: str                      # Filename only\n    complexity: int                     # Total file complexity\n    functions: List[FunctionComplexity] # Function-level details\n</code></pre>"},{"location":"#functioncomplexity","title":"<code>FunctionComplexity</code>","text":"<pre><code>@dataclass \nclass FunctionComplexity:\n    name: str                           # Function name\n    complexity: int                     # Function complexity score\n    line_start: int                     # Starting line number\n    line_end: int                       # Ending line number\n    line_complexities: List[LineComplexity] # Line-by-line breakdown\n</code></pre>"},{"location":"#linecomplexity","title":"<code>LineComplexity</code>","text":"<pre><code>@dataclass\nclass LineComplexity:\n    line: int                           # Line number\n    complexity: int                     # Line complexity contribution\n</code></pre>"},{"location":"#usage-example","title":"Usage Example","text":"<pre><code>from complexipy import file_complexity\n\n# Analyze a file\nresult = file_complexity(\"my_module.py\")\n\nprint(f\"{result.file_name}\")\nprint(f\"Total complexity: {result.complexity}\")\nprint()\n\n# Categorize functions by complexity\nfor func in result.functions:\n    if func.complexity &gt; 15:\n        print(f\"\ud83d\udd34 HIGH: {func.name} (lines {func.line_start}-{func.line_end}): {func.complexity}\")\n    elif func.complexity &gt; 5:\n        print(f\"\ud83d\udfe1 MEDIUM: {func.name} (lines {func.line_start}-{func.line_end}): {func.complexity}\")\n    else:\n        print(f\"\ud83d\udfe2 LOW: {func.name} (lines {func.line_start}-{func.line_end}): {func.complexity}\")\n</code></pre>"},{"location":"#integrations","title":"Integrations","text":"<p>complexipy integrates seamlessly with your development workflow through multiple tools and platforms.</p> GitHub ActionsPre-commit HookVS Code Extension <p>Automatically check code complexity in your CI/CD pipeline:</p> .github/workflows/complexity.yml<pre><code>name: Code Complexity Check\non: [push, pull_request]\n\njobs:\n  complexity:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: rohaquinlop/complexipy-action@v2\n      with:\n        paths: .\n        max_complexity_allowed: 10\n        output_json: true\n</code></pre> <p>Configuration Options:</p> Input Type Description <code>paths</code> string Paths to analyze (required) <code>max_complexity_allowed</code> number Complexity threshold <code>output_json</code> boolean Generate JSON report <code>output_csv</code> boolean Generate CSV report <code>details</code> normal/low Output verbosity <p>Prevent complex code from being committed:</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/rohaquinlop/complexipy-pre-commit\n  rev: v3.0.0\n  hooks:\n    - id: complexipy\n</code></pre> <p>What it does:</p> <ul> <li>Automatically runs before each commit</li> <li>Analyzes only changed Python files  </li> <li>Blocks commits that exceed complexity threshold</li> <li>Shows detailed complexity analysis</li> </ul> <p>Get real-time complexity analysis in your editor:</p> <p>Install the complexipy VS Code extension for:</p> <ul> <li>Real-time analysis as you type</li> <li>Visual indicators for functions and lines</li> <li>Color-coded complexity:<ul> <li>\ud83d\udfe2 Green: Low complexity (\u226415 functions, \u22645 lines)</li> <li>\ud83d\udd34 Red: High complexity (&gt;15 functions, &gt;5 lines)</li> </ul> </li> <li>\u26a1 Auto-updates on file save</li> </ul> <p>Usage: Open Command Palette (<code>Ctrl+Shift+P</code>) \u2192 Search \"complexipy\"</p>"},{"location":"#understanding-cognitive-complexity","title":"Understanding Cognitive Complexity","text":"<p>Let's walk through an example to understand how cognitive complexity is calculated:</p> example.py<pre><code>def process_orders(orders):           # Base: 0\n    processed = []                    # +0\n\n    for order in orders:              # +1 (loop)\n        if order.is_valid():          # +2 (nested condition)\n            if order.priority == 'high':  # +3 (deeply nested)\n                rush_process(order)   # +0\n            elif order.amount &gt; 1000: # +0 (elif at same level)\n                bulk_process(order)   # +0\n            else:                     # +0\n                normal_process(order) # +0\n\n        processed.append(order)       # +0\n\n    return processed                  # +0\n    # Total complexity: 6\n</code></pre>"},{"location":"#complexity-breakdown","title":"Complexity Breakdown","text":"<ol> <li><code>for</code> loop (+1): Adds base loop complexity</li> <li><code>if order.is_valid()</code> (+2): Nested inside loop  </li> <li><code>if order.priority == 'high'</code> (+3): Deeply nested condition</li> </ol>"},{"location":"#running-the-analysis","title":"Running the Analysis","text":"<pre><code>$ complexipy example.py\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc19 complexipy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                                    Summary\n           \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n           \u2503 Path       \u2503 File       \u2503 Function       \u2503 Complexity \u2503\n           \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n           \u2502 example.py \u2502 example.py \u2502 process_orders \u2502 6          \u2502\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ud83e\udde0 Total Cognitive Complexity: 6\n1 file analyzed in 0.0042 seconds\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83c\udf89 Analysis completed! \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>Refactoring Guidelines</p> <ul> <li>Complexity \u2264 5: Simple, easy to understand</li> <li>Complexity 6-15: Moderate, acceptable for most cases</li> <li>Complexity &gt; 15: Complex, consider refactoring into smaller functions</li> </ul>"},{"location":"#links-resources","title":"Links &amp; Resources","text":"<ul> <li>\ud83d\udcda Research Paper - Original cognitive complexity research by SonarSource, G. Ann Campbell</li> <li>\ud83d\udc19 GitHub Repository - Source code and issue tracking  </li> <li>\ud83d\udce6 PyPI Package - Installation and version history</li> <li>\ud83d\udee0\ufe0f GitHub Action - CI/CD integration</li> <li>\ud83e\ude9d Pre-commit Hook - Git workflow integration</li> <li>\ud83d\udd0c VS Code Extension - Editor integration</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Here's how you can help:</p> <ul> <li>Report bugs - Open an issue with details and reproduction steps</li> <li>Suggest features - Share your ideas for improvements</li> <li>Improve docs - Help make the documentation clearer</li> <li>Submit code - Fix bugs or implement new features</li> </ul> <p>Visit our GitHub repository to get started.</p>"},{"location":"#license","title":"License","text":"<p>complexipy is released under the MIT License.</p> <sub>Built with \u2764\ufe0f by @rohaquinlop and contributors</sub>"}]}